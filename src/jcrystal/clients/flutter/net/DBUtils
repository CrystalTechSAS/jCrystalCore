import 'dart:convert';
import 'dart:io';

import './JCrystalApp.dart';
import 'package:path_provider/path_provider.dart';
/*
 * The MIT License
 *
 * Copyright (c) 2018-2019 German Augusto Sotelo Arevalo

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
abstract class ISerializable {
  Map<String, dynamic> toJson();
}
typedef FunctionExp<T> = T Function(Map<String, dynamic>);
class DBUtils {
  static Future<IOSink> openWrite(String partKey, String key)async{
    final path = (await getApplicationDocumentsDirectory()).path;
    if(partKey == null)
    	return File('$path/$key').openWrite(mode: FileMode.writeOnly, encoding: Encoding.getByName("UTF-8"));
    else
    	return File('$path/$partKey/$key').openWrite(mode: FileMode.writeOnly, encoding: Encoding.getByName("UTF-8"));
  }
  static Future<String> openRead(String partKey, String key)async{
    final path = (await getApplicationDocumentsDirectory()).path;
    if(partKey == null)
    	return File('$path/$key').readAsString(encoding: Encoding.getByName("UTF-8"));
    else
    	return File('$path/$partKey/$key').readAsString(encoding: Encoding.getByName("UTF-8"));
  }
  static Future<IOSink> openAppend(String partKey, String key)async{
    final path = (await getApplicationDocumentsDirectory()).path;
    if(partKey == null)
    	return File('$path/$key').openWrite(mode: FileMode.writeOnlyAppend, encoding: Encoding.getByName("UTF-8"));
    else
    	return File('$path/$partKey/$key').openWrite(mode: FileMode.writeOnlyAppend, encoding: Encoding.getByName("UTF-8"));
  }
  static Future<bool> store(String partKey, String key, ISerializable value)async{
    try{
      var _pw = await DBUtils.openWrite(partKey, "V"+key);
      _pw.add(jsonEncode(value).codeUnits);
      _pw.close();
      return true;
    }
    catch(ex){if(JCrystalApp.DEBUG)print(ex);}
    return false;
  }
  static Future<bool> storeList<T extends ISerializable>(String partKey, String key, List<T> values)async{
    try{
      var _pw = await DBUtils.openWrite(partKey, "L"+key);
      for(T value in values){
        _pw.add(",".codeUnits);
        _pw.add(jsonEncode(value).codeUnits);
      }
      _pw.close();
      return true;
    }
    catch(ex){if(JCrystalApp.DEBUG)print(ex);}
    return false;
  }
  static Future<bool> appendToList(String partKey, String key, ISerializable value)async{
    try{
      var _pw = await DBUtils.openWrite(partKey, "L"+key);
      _pw.add(",".codeUnits);
      _pw.add(jsonEncode(value).codeUnits);
      _pw.close();
      return true;
    }
    catch(ex){if(JCrystalApp.DEBUG)print(ex);}
    return false;
  }
  static Future<T> retrieve<T>(String partKey, String key, FunctionExp<T> creator)async{
    try{
      String data = await DBUtils.openRead(partKey, "V"+key);
      if(data != null){
        return creator(jsonDecode(data));
      }
    }
    catch(ex){if(JCrystalApp.DEBUG)print(ex);}
    return null;
  }
  static Future<List<T>> retrieveList<T>(String partKey, String key, FunctionExp<T> creator)async{
  //public static <T, K> java.util.List<T> retrieveList(String partKey, String key, FunctionExp<JSONObject, K, org.json.JSONException> creator){

    try{
      String data = await DBUtils.openRead(partKey, "L"+key);
      data = "["+data.substring(0, data.length - 1)+"]";
      List<Map<String, dynamic>> jsondata = jsonDecode(data);
      List<T> ret = new List<T>(jsondata.length);
      for(int e = 0, i = jsondata.length; e < i; e++){
        ret.add(creator(jsondata[e]));
      }
      return ret;
    }
    catch(ex){if(JCrystalApp.DEBUG)print(ex);}
    return null;
  }
  static void delete(String partKey, String key)async{
    final path = (await getApplicationDocumentsDirectory()).path;
    if(partKey == null)
    	File('$path/$key').delete(recursive: false);
    else
    	File('$path/$partKey/$key').delete(recursive: false);
  }
}